# -*- coding: utf-8 -*-
"""AG_JonathasLuisDeSousa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zlgmGNSUhn2dzfbO9hGevZoJBKZsItFi
"""

import numpy
import random

# Parâmetros
numeroDeIndividuos = 4
numeroDeGeracoes = 5
taxaCrossover = 0.7
taxaMutacao = 0.01

# Inicialização da população
populacao = [random.choices([0, 1], k=14) for _ in range(numeroDeIndividuos)]

# Função para calcular o valor de f(x) dado um vetor binário que representa x
def fitnessBinario(vetorBinario):
    x = binarioParaDecimal(vetorBinario)
    return fitnessDecimal(x)

def fitnessDecimal(x):
    return eval('x**2 - 3*x + 4')

# Função para converter um vetor binário em um valor decimal
def binarioParaDecimal(vetorBinario):
    decimal = 0
    for bit in vetorBinario:
        decimal = decimal * 2 + bit
    return -10 + decimal * (20 / (2**len(vetorBinario) - 1))

# Função para realizar o crossover entre dois indivíduos
def crossover(pai1, pai2):
    crossoverPoint = numpy.random.randint(1, min(len(pai1),len(pai2)) - 1)
    filho1 = pai1[:crossoverPoint] + pai2[crossoverPoint:]
    filho2 = pai2[:crossoverPoint] + pai1[crossoverPoint:]
    return filho1, filho2

# Função para aplicar a mutação em um indivíduo
def mutacao(individuo, taxaMutacao):
    individuoMutante = []
    for bit in individuo:
        if random.random() < taxaMutacao:
            individuoMutante.append(1 - bit)
        else:
            individuoMutante.append(bit)
    return individuoMutante

def printBinarioDecimal(populacao):
  for i in populacao:
    print(binarioParaDecimal(i))

# Algoritmo genético
for geracao in range(numeroDeGeracoes):
    print("\n")
    print(("Geração:", geracao+1))
    fitnessScores = [fitnessBinario(individuo) for individuo in populacao]
    print("\nPopulação")
    printBinarioDecimal(populacao)
    print("\nfitness calcuation")
    print(fitnessScores)

    selectedParents = []
    for _ in range(numeroDeIndividuos):
        tournament_indices = random.sample(range(numeroDeIndividuos), 2)
        tournament_scores = [fitnessScores[i] for i in tournament_indices]
        selectedParents.append(populacao[tournament_indices[tournament_scores.index(max(tournament_scores))]])

    print("\nParents:")
    printBinarioDecimal(selectedParents)

    novaPopulacao = []
    for i in range(0, numeroDeIndividuos, 2):
        if random.random() < taxaCrossover:
            filho1, filho2 = crossover(selectedParents[i], selectedParents[i + 1])
        else:
            filho1, filho2 = selectedParents[i], selectedParents[i + 1]

        filho1 = mutacao(filho1, taxaMutacao)
        filho2 = mutacao(filho2, taxaMutacao)

        novaPopulacao.extend([filho1, filho2])

    populacao = novaPopulacao
    print("\nPopulação depois do Crossover e Mutação")
    printBinarioDecimal(populacao)

melhorIndividuo = max(populacao, key=fitnessBinario)
melhoIndividuoDecimal = binarioParaDecimal(melhorIndividuo)
Melhorfitness = fitnessDecimal(melhoIndividuoDecimal)

print(f"Melhor valor de x encontrado: {melhoIndividuoDecimal}")
print(f"Valor máximo de f(x): {Melhorfitness}")